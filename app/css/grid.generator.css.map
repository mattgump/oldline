{"version":3,"sources":["grid.generator.scss"],"names":[],"mappings":"AAWA;EAAO,+BAAsB;UAAtB,uBAAsB,EAAK;;AAClC;EAAuB,4BAAmB;UAAnB,oBAAmB,EAAK","file":"grid.generator.css","sourcesContent":["\n// Simple Grid Generator\n// Author & copyright (c) 2015: John Polacek\n// Follow on Twitter: @johnpolacek\n\n// Dual MIT & GPL license\n\n// Project Page: https://github.com/johnpolacek/simple-grid-generator\n\n\n// box-sizing: border-box is required\nhtml { box-sizing: border-box; }\n*, *:before, *:after { box-sizing: inherit; }\n\n@mixin spacingHelpers($prefix, $i, $spaceUnit){\n  .#{$prefix}pad-#{$i} { padding: $spaceUnit; }\n  .#{$prefix}pad-#{$i}-left { padding-left: $spaceUnit; }\n  .#{$prefix}pad-#{$i}-right { padding-right: $spaceUnit; }\n  .#{$prefix}pad-#{$i}-top { padding-top: $spaceUnit; }\n  .#{$prefix}pad-#{$i}-bottom { padding-bottom: $spaceUnit; }\n  .#{$prefix}pad-#{$i}-sides { padding-left: $spaceUnit; padding-right: $spaceUnit; }\n  .#{$prefix}pad-#{$i}-vert { padding-top: $spaceUnit; padding-bottom: $spaceUnit; }\n  .#{$prefix}marg-#{$i} { margin: $spaceUnit; }\n  .#{$prefix}marg-#{$i}-left { margin-left: $spaceUnit; }\n  .#{$prefix}marg-#{$i}-right { margin-right: $spaceUnit; }\n  .#{$prefix}marg-#{$i}-top { margin-top: $spaceUnit; }\n  .#{$prefix}marg-#{$i}-bottom { margin-bottom: $spaceUnit; }\n  .#{$prefix}marg-#{$i}-sides { margin-left: $spaceUnit; margin-right: $spaceUnit; }\n  .#{$prefix}marg-#{$i}-vert { margin-top: $spaceUnit; margin-bottom: $spaceUnit; }\n}\n@mixin gridClasses($_prefix:'', $gridColumns:12, $spaceUnits:(8px,16px,32px), $breakpoint_min:'', $breakpoint_max:''){\n  \n  // grid classes\n  .#{$_prefix}grid {\n    margin: 0; clear: none; float: left; \n  }\n  @for $i from 1 through $gridColumns {\n    .#{$_prefix}grid-#{$i} {\n      @extend .#{$_prefix}grid;\n      width:percentage($i/$gridColumns);\n    }\n  }\n\n  // offset classes\n  .#{$_prefix}offset-0 {\n    margin-left: 0;\n  }\n  @for $i from 1 through $gridColumns {\n    .#{$_prefix}offset-#{$i} {\n      margin-left:percentage($i/$gridColumns);\n    }\n  }\n\n  // spacing helper classes\n  @if $spaceUnits {\n    $i : 1;\n    @each $spaceUnit in $spaceUnits {\n      @include spacingHelpers($_prefix, $i, $spaceUnit);\n      $i : $i + 1;\n    }\n    @include spacingHelpers($_prefix, 0, 0);\n  }\n}\n\n@mixin padHalf($halfUnit: 4px) {\n  @include spacingHelpers('', 'half', $halfUnit);\n}\n\n// use grid-flex for equal height grid containers\n@mixin gridFlex() {\n  .grid-flex {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: -webkit-flex;\n    display: flex;\n    -moz-box-wrap: wrap;\n    -webkit-box-wrap: wrap;\n    -webkit-flex-wrap: wrap;\n    -ms-flexbox-wrap: wrap;\n    -ms-flex-wrap: wrap;\n    flex-wrap: wrap;\n  }\n}\n\n// generate grid classes for each breakpoint, defaults defined below\n@mixin gridGenerator(\n         $gridColumns: 12,                    // number of grid columns \n         $breakpoints: (0, 480px, 800px),     // array of breakpoints\n         $breakpointPrefixes: (s-,m-,l-),     // array of breakpoint prefixes\n         $breakpointType: 'px',               // breakpoint type px or em \n         $spaceUnits: (8px,16px,32px)  // array padding and margin units\n       ) {\n\n  //* generate top-level grid classes, no prefix */\n  @include gridClasses('', $gridColumns, $spaceUnits);\n\n  @for $i from 1 through length($breakpointPrefixes) {\n    $prefix: nth($breakpointPrefixes, $i);\n    $breakpoint_min: nth($breakpoints, $i);\n\n    // Add one to support pixel breakpoints, EMs don't need the extra bump\n    @if $breakpointType == 'px' {\n      $breakpoint_min: nth($breakpoints, $i) + 1;\n    }\n\n    $breakpoint_max: '';\n\n    @if $i < length($breakpointPrefixes) {\n      $breakpoint_max: nth($breakpoints, $i+1);\n    }\n\n  //   //* smallest breakpoint */\n    @if $breakpoint_min == 1 {\n\n      @media (max-width: $breakpoint_max) {\n        @include gridClasses($prefix, $gridColumns, $spaceUnits);\n      }\n          \n    } @else {\n\n      //* middle breakpoints */\n      @if $breakpoint_max != '' {\n\n        @media (min-width: $breakpoint_min) and (max-width: $breakpoint_max) {\n          @include gridClasses($prefix, $gridColumns, $spaceUnits);\n        }\n\n      //* largest breakpoint */\n      } @else {\n\n        @media (min-width: $breakpoint_min) {\n          @include gridClasses($prefix, $gridColumns, $spaceUnits);\n        }\n      }\n    }\n  }\n}"]}